By Matt Jervis, 09/01/2010

The omf flag seemed to be introducing issues when gcc called its subcommands
(e.g. cc1) so I removed it.


--- gcc-4.0.2/gcc-4.0.2/gcc/gcc.c.orig	2010-01-03 18:20:48.000000000 +1300
+++ gcc-4.0.2/gcc-4.0.2/gcc/gcc.c	2010-01-03 18:30:42.000000000 +1300
@@ -729,7 +729,7 @@ proper position among the other output f
 #ifndef LINK_COMMAND_SPEC
 #define LINK_COMMAND_SPEC "\
 %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\
-    %(program_prefix)%(linker) -omf=%(omf) %l " LINK_PIE_SPEC "%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\
+    %(program_prefix)%(linker) %l " LINK_PIE_SPEC "%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\
     %{s} %{t} %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\
     %{static:} %{L*} %(mfwrap) %(link_libgcc) %o %(mflib)\
     %{fprofile-arcs|fprofile-generate:-lgcov}\
@@ -781,7 +781,6 @@ static const char *switches_need_spaces 
 static const char *linker_name_spec = LINKER_NAME;
 static const char *link_command_spec = LINK_COMMAND_SPEC;
 static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;
-static const char *omf = OMF;
 static const char *program_prefix = PROGRAM_PREFIX;
 static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;
 static const char *sysroot_suffix_spec = SYSROOT_SUFFIX_SPEC;
@@ -797,7 +796,7 @@ static const char *sysroot_hdrs_suffix_s
    call cc1 (or cc1obj in objc/lang-specs.h) from the main specs so
    that we default the front end language better.  */
 static const char *trad_capable_cpp =
-"%(program_prefix)cc1 -omf=%(omf) -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}";
+"%(program_prefix)cc1 -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}";
 
 /* We don't wrap .d files in %W{} since a missing .d file, and
    therefore no dependency entry, confuses make into thinking a .o
@@ -846,9 +845,9 @@ static const char *asm_options =
 
 static const char *invoke_as =
 #ifdef AS_NEEDS_DASH_FOR_PIPED_INPUT
-"%(program_prefix)as -omf=%(omf) %(asm_options) %|.s %A ";
+"%(program_prefix)as %(asm_options) %|.s %A ";
 #else
-"%(program_prefix)as -omf=%(omf) %(asm_options) %m.s %A ";
+"%(program_prefix)as %(asm_options) %m.s %A ";
 #endif
 
 /* Some compilers have limits on line lengths, and the multilib_select
@@ -985,16 +984,16 @@ static const struct compiler default_com
        %{!combine:\
 	  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \
 		%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i} \n\
-		    %(program_prefix)cc1 -omf=%(omf) -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \
+		    %(program_prefix)cc1 -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \
 			%(cc1_options)}\
 	  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\
-		%(program_prefix)cc1 -omf=%(omf) %(cpp_unique_options) %(cc1_options)}}}\
+		%(program_prefix)cc1 %(cpp_unique_options) %(cc1_options)}}}\
           %{!fsyntax-only:%(invoke_as)}} \
       %{combine:\
 	  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \
 		%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i}}\
 	  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\
-		%(program_prefix)cc1 -omf=%(omf) %(cpp_unique_options) %(cc1_options)}}\
+		%(program_prefix)cc1 %(cpp_unique_options) %(cc1_options)}}\
                 %{!fsyntax-only:%(invoke_as)}}}}}}", 0, 1, 1},
   {"-",
    "%{!E:%e-E or -x required when input is from standard input}\
@@ -1007,32 +1006,32 @@ static const struct compiler default_com
       %{!E:%{!M:%{!MM:\
 	  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \
 		%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i} \n\
-		    %(program_prefix)cc1 -omf=%(omf) -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \
+		    %(program_prefix)cc1 -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \
 			%(cc1_options)\
                         -o %g.s %{!o*:--output-pch=%i.gch}\
                         %W{o*:--output-pch=%*}%V}\
 	  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\
-		%(program_prefix)cc1 -omf=%(omf) %(cpp_unique_options) %(cc1_options)\
+		%(program_prefix)cc1 %(cpp_unique_options) %(cc1_options)\
                     -o %g.s %{!o*:--output-pch=%i.gch}\
                     %W{o*:--output-pch=%*}%V}}}}}}", 0, 0, 0},
   {".i", "@cpp-output", 0, 1, 0},
   {"@cpp-output",
-   "%{!M:%{!MM:%{!E:%(program_prefix)cc1 -omf=%(omf) -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}", 0, 1, 0},
+   "%{!M:%{!MM:%{!E:%(program_prefix)cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}", 0, 1, 0},
   {".s", "@assembler", 0, 1, 0},
   {"@assembler",
-   "%{!M:%{!MM:%{!E:%{!S:%(program_prefix)as -omf=%(omf) %(asm_debug) %(asm_options) %i %A }}}}", 0, 1, 0},
+   "%{!M:%{!MM:%{!E:%{!S:%(program_prefix)as %(asm_debug) %(asm_options) %i %A }}}}", 0, 1, 0},
   {".S", "@assembler-with-cpp", 0, 1, 0},
   {"@assembler-with-cpp",
 #ifdef AS_NEEDS_DASH_FOR_PIPED_INPUT
    "%(trad_capable_cpp) -lang-asm %(cpp_options)\
       %{E|M|MM:%(cpp_debug_options)}\
       %{!M:%{!MM:%{!E:%{!S:-o %|.s |\n\
-       %(program_prefix)as -omf=%(omf) %(asm_debug) %(asm_options) %|.s %A }}}}"
+       %(program_prefix)as %(asm_debug) %(asm_options) %|.s %A }}}}"
 #else
    "%(trad_capable_cpp) -lang-asm %(cpp_options)\
       %{E|M|MM:%(cpp_debug_options)}\
       %{!M:%{!MM:%{!E:%{!S:-o %|.s |\n\
-       %(program_prefix)as -omf=%(omf) %(asm_debug) %(asm_options) %m.s %A }}}}"
+       %(program_prefix)as %(asm_debug) %(asm_options) %m.s %A }}}}"
 #endif
    , 0, 1, 0},
 
@@ -1586,7 +1585,6 @@ static struct spec_list static_specs[] =
   INIT_STATIC_SPEC ("md_exec_prefix",		&md_exec_prefix),
   INIT_STATIC_SPEC ("md_startfile_prefix",	&md_startfile_prefix),
   INIT_STATIC_SPEC ("md_startfile_prefix_1",	&md_startfile_prefix_1),
-  INIT_STATIC_SPEC ("omf",                      &omf),
   INIT_STATIC_SPEC ("program_prefix",           &program_prefix),
   INIT_STATIC_SPEC ("startfile_prefix_spec",	&startfile_prefix_spec),
   INIT_STATIC_SPEC ("sysroot_suffix_spec",	&sysroot_suffix_spec),
