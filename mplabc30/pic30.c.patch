--- gcc-4.0.2/gcc-4.0.2/gcc/config/pic30/pic30.c.orig	2012-04-02 04:42:18.000000000 +0200
+++ gcc-4.0.2/gcc-4.0.2/gcc/config/pic30/pic30.c	2012-04-02 07:14:57.000000000 +0200
@@ -75,6 +75,7 @@
 #ifdef LICENSE_MANAGER
 #include "../../../../../pic30-lm/include/pic30-lm.h"
 #endif
+#include "../../../c30_device_info_path.h"
 
 /* fputs_unlocked warning getting on my nerves */
 #undef fputs
@@ -948,6 +949,7 @@
   int mismatch=0;
   char * match;
   char * device_buf;
+  int i;
 
   mask = 0;
   if (strcmp(id, "GENERIC-16BIT") == 0) {
@@ -962,6 +964,14 @@
     *matched_id = (char *)"GENERIC-16BIT-EP";
     return TARGET_MASK_ARCH_EP_GENERIC;
   }
+  for (i = 0; pic30_resource_files[i]; i++) {
+	  if (access(pic30_resource_files[i], R_OK) == 0) {
+		  pic30_resource_file = pic30_resource_files[i];
+		  break;
+	  }
+  }
+  if (pic30_resource_file == 0)
+	  pic30_resource_file = pic30_resource_files[0];
   if (pic30_resource_file == 0) {
     warning("Provide a resource file");
     return 0;
@@ -2515,6 +2525,7 @@
     flag_tree_loop_optimize = 0;
   }
 #endif
+#ifdef LICENSE_MANAGER
   if (pic30_license_valid < 0) {
     /* an invalid license, 
        disable those optimizations turned on by -O2,-O3,-Os */
@@ -2570,6 +2581,7 @@
 
     #undef NULLIFY
   }
+#endif
   if (pic30_it_option) {
     /* enable instrumented trace */
     char *option,*c;
@@ -2747,6 +2759,7 @@
     while (match) {
 
       /* support for the pic30_io_fmt argument */
+#if (defined(C30_SMARTIO_RULES) && (C30_SMARTIO_RULES > 1))
       if (match->conv_flags == conv_indeterminate &&
                  pic30_io_size_val == 2 &&
                  pic30_io_fmt && (match->conversion_style != info_I)) {
@@ -2759,6 +2772,7 @@
         conversion_info(pic30_convertable_input_format_string(pic30_io_fmt),
                         match);
       }
+#endif
 
       if (match->function_convertable) {
 #if (defined(C30_SMARTIO_RULES) && (C30_SMARTIO_RULES > 1))
@@ -16545,7 +16559,10 @@
     if (*c) c++;
     penpenultimate[1+len++] = 0;
     if (len) {
-      add_path(xstrdup(my_prefix), SYSTEM, 0, 0);
+	    if (penpenultimate[1] == '/')
+		    add_path(xstrdup(penpenultimate+1), SYSTEM, 0, 0);
+	    else
+		    add_path(xstrdup(my_prefix), SYSTEM, 0, 0);
     }
   }
   free(my_prefix);
